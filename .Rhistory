knitr::opts_chunk$set(echo = TRUE)
dataset <- read.csv("expenses.csv")
View(dataset)
library(tidyverse)
library(dplyr)
library(ggplot2)
dataset <- read.csv("expenses.csv")
fullmodel <- lm(expenses ~ ., data = dataset)
fullmodel <- lm(charges ~ ., data = dataset)
summary(fullmodel)
reducedmodel <- lm(charges ~ age, bmi, children, smoker, data = dataset)
View(dataset)
dataset
reducedmodel <- lm(charges ~ age, bmi, children, smoker, data = dataset)
reducedmodel <- lm(charges ~ age + bmi + children + smoker, data = dataset)
summary(reducedmodel)
summary(fullmodel)
dataset
reducedmodel <- lm(charges ~ age + bmi + children + smoker, data = dataset)
summary(reducedmodel)
summary(fullmodel)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
dataset <- read.csv("expenses.csv")
dataset <- dataset %>%
mutate(sex = as.factor(sex),
smoker = as.factor(smoker),
region = as.factor(region))
dataset1 <- read.csv("twitchdata-updata.csv")
library(tidyverse)
library(dplyr)
library(ggplot2)
dataset <- read.csv("expenses.csv")
dataset <- dataset %>%
mutate(sex = as.factor(sex),
smoker = as.factor(smoker),
region = as.factor(region))
dataset1 <- read.csv("twitchdata-update.csv")
View(dataset1)
dataset1 %>%
keep(is.numeric) -> dataset_quantitative1
View(dataset1)
glimpse(dataset1)
dataset1 %>%
keep(is.numeric) -> dataset_quantitative1
df <- data.frame(dataset_quantitative[, c("Watch.time.Minutes.", "Stream.time.minutes.", "Peak.viewers", "Average.viewers", "Followers", "Followers.gained", "Views.gained")])
dataset1 %>%
keep(is.numeric) -> dataset_quantitative1
df <- data.frame(dataset_quantitative1[, c("Watch.time.Minutes.", "Stream.time.minutes.", "Peak.viewers", "Average.viewers", "Followers", "Followers.gained", "Views.gained")])
datarows <- nrow(df)
y_mat <- as.matrix(df)[, 7]
x1 <- df[, 1]
x2 <- df[, 2]
x3 <- df[, 3]
x4 <- df[, 4]
x5 <- df[, 5]
x6 <- df[, 6]
Ym <- matrix(y_mat, ncol = 1, byrow = T)
y_int <- data.frame(matrix(nrow = datarows, ncol = 1))
for(i in seq(1:datarows)){
y_int[i, 1] = 1
}
df <- data_frame(y_int, x1, x2, x3, x4, x5, x6)
Xm <- cbind(rep(1, datarows), as.matrix(df[, 1]), as.matrix(df[, 2]), as.matrix(df[, 3]),as.matrix(df[, 4]), as.matrix(df[, 5]), as.matrix(df[, 6]))
# Lets find the transpose of matrix Xm
t(Xm) -> transposeXm
# The product of Xm and the transpose of Xm
transposeXm%*%Xm-> ProDuct1
# Inverse of the matrix * transpose * Y
solve(ProDuct1)%*%transposeXm%*%Ym
Ym <- matrix(dataset_quantitatve1$Views.gained, ncol = 1, byrow = TRUE)
Ym <- matrix(dataset_quantitative1$Views.gained, ncol = 1, byrow = TRUE)
#Ym
X <- c()
for(i in 1:length(dataset_quantitative1)){
X <- append(X, 1)
X <- append(X, dataset_quantitative1$Watch.time.Minutes.[i])
X <- append(X, dataset_quantitative1$Stream.time.minutes.[i])
X <- append(X, dataset_quantitative1$Peak.viewers[i])
X <- append(X, dataset_quantitative1$Average.viewers[i])
X <- append(X, dataset_quantitative1$Followers[i])
X <- append(X, dataset_quantitative1$Followers.gained[i])
}
Xm <- matrix(X, ncol = 7, byrow = TRUE)
interceptslope <- solve(t(Xm)%*% Xm)%*%t(Xm)%*%Ym
Ym <- matrix(dataset_quantitative1$Views.gained, ncol = 1, byrow = TRUE)
#Ym
X <- c()
for(i in 1:length(dataset_quantitative1)){
X <- append(X, 1)
X <- append(X, dataset_quantitative1$Watch.time.Minutes.[i])
X <- append(X, dataset_quantitative1$Stream.time.minutes.[i])
X <- append(X, dataset_quantitative1$Peak.viewers[i])
X <- append(X, dataset_quantitative1$Average.viewers[i])
X <- append(X, dataset_quantitative1$Followers[i])
}
Xm <- matrix(X, ncol = 6, byrow = TRUE)
interceptslope <- solve(t(Xm)%*% Xm)%*%t(Xm)%*%Ym
Ym <- matrix(dataset_quantitative1$Views.gained, ncol = 1, byrow = TRUE)
#Ym
X <- c()
for(i in 1:length(dataset_quantitative1)){
X <- append(X, 1)
X <- append(X, dataset_quantitative1$Watch.time.Minutes.[i])
X <- append(X, dataset_quantitative1$Stream.time.minutes.[i])
X <- append(X, dataset_quantitative1$Peak.viewers[i])
X <- append(X, dataset_quantitative1$Average.viewers[i])
}
Xm <- matrix(X, ncol = 5, byrow = TRUE)
interceptslope <- solve(t(Xm)%*% Xm)%*%t(Xm)%*%Ym
Ym <- matrix(dataset_quantitative1$Views.gained, ncol = 1, byrow = TRUE)
#Ym
X <- c()
for(i in 1:length(dataset_quantitative1)){
X <- append(X, 1)
X <- append(X, dataset_quantitative1$Watch.time.Minutes.[i])
X <- append(X, dataset_quantitative1$Stream.time.minutes.[i])
X <- append(X, dataset_quantitative1$Peak.viewers[i])
X <- append(X, dataset_quantitative1$Average.viewers[i])
}
Xm <- matrix(X, ncol = 5, byrow = TRUE)
solve(t(Xm)%*% Xm)
Ym <- matrix(dataset_quantitative1$Views.gained, ncol = 1, byrow = TRUE)
#Ym
X <- c()
for(i in 1:length(dataset_quantitative1)){
X <- append(X, 1)
X <- append(X, dataset_quantitative1$Watch.time.Minutes.[i])
X <- append(X, dataset_quantitative1$Followers[i])
X <- append(X, dataset_quantitative1$Peak.viewers[i])
X <- append(X, dataset_quantitative1$Average.viewers[i])
}
Xm <- matrix(X, ncol = 5, byrow = TRUE)
solve(t(Xm)%*% Xm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
dataset <- read.csv("expenses.csv")
dataset <- dataset %>%
mutate(sex = as.factor(sex),
smoker = as.factor(smoker),
region = as.factor(region))
library(tidyverse)
library(dplyr)
library(ggplot2)
dataset <- read.csv("expenses.csv")
dataset <- dataset %>%
mutate(sex = as.factor(sex),
smoker = as.factor(smoker),
region = as.factor(region))
View(dataset)
dataset
class(dataset$sex)
library(corrplot)
dataset %>%
keep(is.numeric) -> dataset_quantitative
cor(dataset_quantitative) -> dataset.cor
#corrplot.mixed(dataset.cor, upper = 'pie',lower='number')
corrplot(dataset.cor, method = "ellipse",)
qqnorm(dataset$age)
qqline(dataset$age)
qqnorm(dataset$bmi)
qqline(dataset$bmi)
qqnorm(dataset$children)
qqline(dataset$children)
qqnorm(dataset$charges)
qqline(dataset$charges)
levels(dataset$sex)
levels(dataset$smoker)
levels(dataset$region)
fullmodel <- lm(charges ~ ., data = dataset)
fullmodel <- lm(charges ~ ., data = dataset)
fullmodel
df <- data.frame(dataset_quantitative[, c("charges", "age", "bmi", "children")])
datarows <- nrow(df)
y_mat <- as.matrix(df)[, 1]
x1 <- df[, 2]
x2 <- df[, 3]
x3 <- df[, 4]
Ym <- matrix(y_mat, ncol = 1, byrow = T)
y_int <- data.frame(matrix(nrow = datarows, ncol = 1))
for(i in seq(1:datarows)){
y_int[i, 1] = 1
}
df <- data_frame(y_int, x1, x2, x3)
Xm <- cbind(rep(1, datarows), as.matrix(df[, 2]), as.matrix(df[, 3]), as.matrix(df[, 4]))
# Lets find the transpose of matrix Xm
t(Xm) -> transposeXm
# The product of Xm and the transpose of Xm
transposeXm%*%Xm-> ProDuct1
# Inverse of the matrix * transpose * Y
solve(ProDuct1)%*%transposeXm%*%Ym
# Calculate the intercept and slope
solve(ProDuct1)%*%transposeXm%*%Ym -> interceptandslope
## fitted values
Xm %*% interceptandslope
##residuals
Ym -  Xm %*% interceptandslope
df <- data.frame("Fitted Values" =Xm %*% interceptandslope, "Residuals" =  Ym -  Xm %*% interceptandslope)
df
summary(fullmodel)
model.fit <- lm(charges ~ ., dataset_quantitative)
# summary(model.fit)
confint(model.fit)
# -6916.24 + 239.99age + 332.08bmi + 542.85children
age_upper <- 239.99 + 1.961744 * 22.29
age_lower <- 239.99 - 1.961744 * 22.29
bmi_upper <- 332.08 + 1.961744 * 51.31
bmi_lower <- 332.08 - 1.961744 * 51.31
# d.data <- tibble(X, Y)
conf.95 <- qt(p=.025, df=1334, lower.tail = FALSE)
conf.int.age <- cbind("Lower CI (Age)" = age_lower, "Upper CI (Age)" = age_upper)
conf.int.bmi <- cbind("Lower CI (BMI)" = bmi_lower, "Upper CI (BMI)" = bmi_upper)
qt(p=.025, df=6, lower.tail = FALSE)
tribble(~Home,  ~SellingPrice,  ~Size,  ~Taxes,  ~Bedrooms,   ~Bathrooms,  ~New,
1,       279900,      2048,    3104,       4,          2,       "No",
2,       146500,       912,    1173,       2,          1,       "No",
3,       237700,      1654,    3076,       4,          2,       "No",
4,       200000,      2068,    1608,       3,          2,       "No",
5,       159900,      1477,    1454,       3,          3,       "No",
6,       499900,      3153,    2997,       3,          2,       "Yes",
7,       265500,      1355,    4054,       3,          2,       "No",
8,       289900,      2075,    3002,       3,          2,       "Yes"
)-> Homes
Homes
lm(Homes$SellingPrice~Homes$Size)-> xx
xx
summary(xx)
conf.int.age
conf.int.bmi
reducedmodel <- lm(charges ~ age + bmi + children + smoker, data = dataset)
summary(reducedmodel)
summary(fullmodel)
anova(reducedmodel, fullmodel)
library(tree)
tree.model <- tree(charges ~ ., dataset,
mindev = 0.005)
tree.model
summary(tree.model)
plot(tree.model)
text(tree.model, pretty = 0)
intercept_only <- lm(charges ~ 1, data=dataset)
#define model with all predictors
all <- lm(charges ~ ., data=dataset)
#perform forward stepwise regression
forward <- step(intercept_only, direction='forward', scope=formula(all), trace=0)
forward
#view results of forward stepwise regression
forward$anova
reducedmodel <- lm(charges ~ age + bmi + children + smoker + region, data = dataset)
summary(reducedmodel)
summary(fullmodel)
reducedmodel <- lm(charges ~ age + bmi + children + smoker, data = dataset)
summary(reducedmodel)
summary(fullmodel)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(olsrr)
library(tidyverse)
diamonds%>%
select(x,y,z,table,depth,price)%>%
filter(price >= 17000)%>%
slice(1:50)-> diamonds1700
diamonds1700
linmod <- lm(price ~. ,data = diamonds1700)
out <- ols_step_all_possible(linmod)
out
intercept_only <- lm(price ~ 1, data=diamonds1700)
#define model with all predictors
all <- lm(price ~ ., data=diamonds1700)
#perform forward stepwise regression
forward <- step(intercept_only, direction='forward', scope=formula(all), trace=0)
forward
#view results of forward stepwise regression
forward$anova
diamonds2 <- diamonds %>% select(x,y,z,table,depth,price) %>% filter(price >= 17000)%>% slice(1:500)
intercept_only <- lm(price ~ 1, data=diamonds2)
#define model with all predictors
all <- lm(price ~ ., data=diamonds2)
#perform forward stepwise regression
forward <- step(intercept_only, direction='forward', scope=formula(all), trace=0)
forward
#view results of forward stepwise regression
forward$anova
ols_step_all_possible(all)
diamonds2 <- diamonds %>% select(x,y,z,table,depth,price) %>% filter(price >= 17000)%>% slice(1:500)
intercept_only <- lm(price ~ 1, data=diamonds2)
#define model with all predictors
all <- lm(price ~ ., data=diamonds2)
#perform forward stepwise regression
forward <- step(intercept_only, direction='forward', scope=formula(all), trace=0)
#view results of forward stepwise regression
forward$anova
ols_step_all_possible(all)
diamonds3 <- diamonds %>% select(x,y,z,table,depth,price) %>% filter(price >= 17000)
intercept_only <- lm(price ~ 1, data=diamonds3)
#define model with all predictors
all <- lm(price ~ ., data=diamonds3)
#perform forward stepwise regression
forward <- step(intercept_only, direction='forward', scope=formula(all), trace=0)
#view results of forward stepwise regression
forward$anova
ols_step_all_possible(all)
